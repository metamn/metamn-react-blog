{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-reactive-fuctional-nature-of-react/","webpackCompilationHash":"98b29a22cf5df4d536de","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"a8dc6cf9-bdf5-575f-891f-66a9e1e668d7","excerpt":"This is a test post for now …","html":"<p>This is a test post for now …</p>\n<!--more-->\n<h2>The context</h2>\n<p>Both paradigms solve the same problem — to build modular, interactive applications — in different ways.</p>\n<p>The old way implemented modularity through tight-coupling and interaction synchronously. The new way implements modularity with loose-coupling and interaction asynchronously.</p>\n<p>Modularity and interaction abstracted to composition and coupling can further elucidate the picture. Composition is about how the components of the system can add up to form a whole, while coupling is about how they communicate with each other.</p>\n<p><a href=\"https://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/\">Functional reactive programming</a> deals with composition the functional programming way and with coupling the reactive programming way.</p>","frontmatter":{"title":"The reactive, functional nature of React","date":"October 08, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/the-reactive-fuctional-nature-of-react/","previous":{"excerpt":"A way to think about Information Architecture in React terms.","fields":{"slug":"/ontology-taxonomy-choreography/"},"frontmatter":{"title":"Ontology, taxonomy, choreography"}},"next":null}}}
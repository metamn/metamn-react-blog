{"componentChunkName":"component---src-templates-blog-post-js","path":"/on-design-sytems/","webpackCompilationHash":"090d79fad7732225c017","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"d60eb2c7-d237-5e98-929c-0ea0cd0084dc","excerpt":"An overview.","html":"<p>An overview.</p>\n<!--more-->\n<hr>\n<h2>A short history</h2>\n<p>Design systems have been around since 2013-2014.</p>\n<p>Lonely Planet’s <a href=\"https://github.com/lonelyplanet/rizzo\">Rizzo</a> was the early bird then followed by the well-known <a href=\"https://github.com/mui-org/material-ui\">Material UI</a> implementing Google’s <a href=\"https://material.io/\">Material Design</a>.</p>\n<p>2020 was the year when design systems popped up every week. <a href=\"https://adele.uxpin.com/\">Adele</a> of UXPin lists over a hundred systems and libraries—yet the list is incomplete.</p>\n<h2>Purpose and audience</h2>\n<p>Why companies create design systems? A <a href=\"https://docs.google.com/spreadsheets/d/1Yn-fzRIfXcpFilQwjv62MC4yRCTQFaS2qhhtbnfohhg/edit?usp=sharing\">quick analysis</a> reveals the main goals:</p>\n<ul>\n<li>Internal: To build apps for their brand and/or platform.</li>\n<li>External: To build general purpose apps.</li>\n<li>Foundational: To help build design systems and component libraries.</li>\n</ul>\n<p>The majority builds internal systems—no wonder—design systems shine when used to create uniform looking products across a portfolio.</p>\n<p>A handful of companies create general purpose systems. More precisely they create an internal system and share to the public.</p>\n<p>This generosity links to the company size: Google, IBM, Ant, Adobe can afford to open source code worth millions:</p>\n<blockquote>\n<p>This represents millions of dollars of investment for each company to duplicate work that many other companies are also doing. — <a href=\"https://react-spectrum.adobe.com/react-aria/why.html\">Adobe Spectrum</a></p>\n</blockquote>\n<p>Foundational systems represent a new business model—<a href=\"https://www.modulz.app/\">Modulz</a> helps teams create design systems without writing code—or <a href=\"https://bold.bridge.ufsc.br/en/about/\">institutions</a> sharing their work for the common good.</p>\n<h2>Type</h2>\n<p>The terms design system and component library are often interchanged. The difference is subtle and far-reaching.</p>\n<blockquote>\n<p>The difference between a component library and a design system is whether or not your components have ’className’ and ’style’ props. — <a href=\"https://twitter.com/markdalgleish/status/1308330959973027846?ref_src=twsrc%5Etfw\">Mark Dalgleish</a></p>\n</blockquote>\n<p>Design systems are strict. They form a complete system. They don’t allow on-the-fly customisation. Modifying a system is possible at a well-defined entry point then changes reflect across the site automatically.</p>\n<p>Component libraries are loose. They offer the basics and let customisation happen at any point, any time.</p>\n<p>Design systems are more expensive to create, and easier to use later. <a href=\"https://seek-oss.github.io/braid-design-system/\">Braid’s Playroom</a> shows even non-devs can create with a design system.</p>\n<h2>Features</h2>\n<p>Purpose and audience defines a design systems’ type and features.</p>\n<p>Material Design goes full circle. From top-bottom connects designers and their tools with developers of all platforms and technologies. From Figma to React and native apps everything is in a system.</p>\n<p><a href=\"https://radix-ui.com/primitives/docs/overview/introduction\">Radix</a> from Modulz is bare bones to that level of not offering any styling.</p>\n<p><a href=\"https://react-spectrum.adobe.com/index.html\">Spectrum</a> from Adobe offers support for server side rendering, virtual lists, state management and accessibility for anybody building design systems.</p>\n<p>While purpose, audience and type overlap, features differentiate and define the unique characteristics of a design system.</p>\n<h2>Example</h2>\n<p>Design systems hang on a purpose. Purpose then defines everything else down to the technology stack.</p>\n<p>Let’s play with this idea further by analysing how to approach creating a tool for building interactive design websites.</p>\n<h3>Interactive design</h3>\n<blockquote>\n<p>Interactive design is a user-oriented field of study that focuses on meaningful communication of media through cyclical and collaborative processes between people and technology. <a href=\"https://en.wikipedia.org/wiki/Interactive_design\">Wikipedia</a></p>\n</blockquote>\n<p>This definition is vague. The principles clear the picture:</p>\n<ul>\n<li>Interactive design deals with meaningful content.</li>\n<li>Interacting with content is again meaningful.</li>\n<li>Content is changing continuously upon interaction.</li>\n<li>External sources continuously transforms and updates the content.</li>\n</ul>\n<p>On web interactive design is young. Started as storytelling today it goes as <a href=\"https://idyll-lang.org/\">interactive articles</a>, <a href=\"https://explorabl.es/\">explorable explanations</a>, or <a href=\"https://pudding.cool/\">data-driven journalism</a>. <a href=\"https://wattenberger.com/\">Amelia Wattenberger</a> leads the pack.</p>\n<p>In short, interactive design deals with a stream of content and lets users explore it in meaningful, playful ways.</p>\n<p>Comparing to apps interaction is through gestures—new, creative ways—versus classic input boxes.</p>\n<h3>Somenage</h3>\n<p>Let’s call this example tool Somenage, from <em>some</em> and <em>nage</em> (Japanese for <em>throw</em>), depicting the attempt(s) to structure the unknown.</p>\n<p>The <strong>purpose</strong> is clear: A tool for building interactive design websites.</p>\n<p>The <strong>audience</strong> is modest: Let it be an internal tool first, then after a while make it available for the public.</p>\n<p>Now let’s see how purpose and audience defines the rest.</p>\n<h3>Features</h3>\n<ol>\n<li>Interaction design employs gestures. Like <a href=\"https://violuk.com/\">updating the site on cursor movement</a>. For that we need a web framework supporting real-time interface updates. Like <strong>React</strong>.</li>\n<li>Gestures involve input devices like keyboard, mouse, touchpad, touchscreen, camera for now and glasses, gloves in the future. <strong>Accessibility (A11y)</strong> libraries offer the best available cross-browser and cross-device gesture management tools today.</li>\n<li>Interaction design deals with meaningful content. If the content is meaningful for humans it should be meaningful for machines too. This means <strong>SEO</strong> and <strong>Server Side Rendering (SSR)</strong>.</li>\n<li>Content is continuously updated and transformed. This can result in thousands of content pieces on a single page, which requires <strong>virtual lists</strong> for performant rendering.</li>\n<li>Internal audience requires to packaging. Registries like <strong><a href=\"https://www.npmjs.com/\">NPM</a></strong> are not required to publish the code.</li>\n</ol>\n<p>Using common terms the main features become:</p>\n<ul>\n<li>Highly interactive components (React)</li>\n<li>Streaming content (Virtual lists)</li>\n<li>Gestures (A11y)</li>\n<li>Static websites. (SSR)</li>\n<li>Optimized for search engines. (SEO)</li>\n<li>No NPM publishing. No monorepo. (Internal audience)</li>\n</ul>\n<h3>Technology</h3>\n<ol>\n<li><a href=\"https://react-spectrum.adobe.com/react-aria/index.html\">react-aria</a> for virtual lists and A11y.</li>\n<li><a href=\"https://nextjs.org/\">Next.js</a> for SSR.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Semantics#Semantics_in_HTML\">Semantic HTML5 elements</a> for SEO.</li>\n</ol>\n<p>The list is short for now. Best practices will complete the missing parts.</p>\n<h2>Best practices</h2>\n<p>This quick <a href=\"https://docs.google.com/spreadsheets/d/1Yn-fzRIfXcpFilQwjv62MC4yRCTQFaS2qhhtbnfohhg/edit?usp=sharing\">design systems analysis</a> reveals common practices covering theory, technology and usability.</p>\n<h3>Theory</h3>\n<p>Design systems have no clear theory behind yet. Everybody rolls their own following or not existing design patterns.</p>\n<p>The patterns below come from the analysed systems. Shopify’s Polaris and Adobe’s Spectrum are implementing all these patterns to a certain extent. The rest implements none, or part of them.</p>\n<p>Theory is important. Drives design decisions. It’s good to have solid foundation and principles enduring years.</p>\n<h4>Single Source of Truth (SST)</h4>\n<p>Design systems collect settings under a common place. Any later change goes into this single source of truth and reflects across the system automatically. Devs are not required to spend their attention searching for settings locations.</p>\n<h4>Single Responsibility Principle (SRP)</h4>\n<p>Design systems contain dozens, hundreds of tokens and components.</p>\n<p>Independent components—contained; capable to exist on their own, in isolation— compose better and provide modular architecture.</p>\n<h4>The base / variant pattern (BEM)</h4>\n<p>In <a href=\"https://www.slideshare.net/MajaWichrowska/building-and-rebuilding-the-airbnb-design-system\">Building (and Re-Building) the Airbnb Design System</a> an old pattern, <a href=\"http://getbem.com/introduction/\">BEM</a> emerges as a solution for scalability.</p>\n<p>Keeping a simple base and following simple rules for extensions scales up the source code and reduces its complexity.</p>\n<h3>Technology</h3>\n<p>In contrast to theory, technology is well-defined on the design systems scene.</p>\n<p>The majority of the solutions goes with <strong>Typescript</strong> and <strong>CSS-in-JS</strong>. All solutions embrace packaging and publishing to NPM. Half of them via a <strong>monorepo</strong>.</p>\n<p>Testing isn’t fully satisfactory. The majority does <strong>unit testing</strong> using <strong>ts-jest</strong> and <strong>React Testing Library</strong> with questionable coverage.</p>\n<p>Often times <strong>Storybook</strong> complements missing unit tests and mocks integration tests with visual tests.</p>\n<p>Storybook mocks also documentation. <a href=\"https://bold.bridge.ufsc.br/en/\">Bold</a> alone managed to come up with a good-looking Storybook for their API docs. The rest uses Storybook to complement their documentation suite which results in scattered user experience.</p>\n<p>The big players, again, managed to come up with an <strong>in-house, integrated documentation</strong> tool reaching UX excellence.</p>\n<p>What’s missing from the majority of solutions is <strong>generated documentation (JSDoc)</strong>. Manual documentation—no matter what—breaks from the source code’s reality.</p>\n<h3>Usability</h3>\n<p>Design systems have <em>users</em> who build solutions with the system without extending it, and have <em>devs</em> who build / adapt / tweak new design systems from the existing system.</p>\n<p>The first group values <strong>User Experience (UX)</strong> while the second group longs for <strong>Developer Experience (DX)</strong>.</p>\n<p>The groups overlap. Important is to examine design systems from these two perspectives instead of a single one.</p>\n<h4>Documentation</h4>\n<p>For users the first important feature is the documentation. This is the entry point where they meet the design system.</p>\n<p>From the analysis <a href=\"https://www.carbondesignsystem.com/\">IBM’s Carbon</a> turned out the most complete, offering the following features:</p>\n<ul>\n<li>Impeccable UX of the documentation site.</li>\n<li>Integrated: All docs (API, Guide) integrated into a single application.</li>\n<li>Generated: Entries generated from JSDoc, MDX, tests instead of written separately.</li>\n<li>Searchable.</li>\n<li>Well-explained props.</li>\n<li>Every prop comes with its own example.</li>\n<li>Live editor for examples.</li>\n</ul>\n<h4>API</h4>\n<p>For users the second important feature is the usability of the API.\nNamely:</p>\n<ul>\n<li>Importing components: <code class=\"language-text\">import ../../...</code> won’t do it. <code class=\"language-text\">import @package/</code> will do it.</li>\n<li>Fewer props: <code class=\"language-text\">&lt;Card as=&#39;thumbnail&#39;&gt;</code> is better than <code class=\"language-text\">&lt;Card image={true} title=&#39;H3&#39; excerpt={true}&gt;</code></li>\n<li>Consistent props naming: <code class=\"language-text\">&lt;Button as=&#39;link&#39;&gt;</code> and <code class=\"language-text\">&lt;Heading level={3}&gt;</code> won’t do it. <code class=\"language-text\">&lt;Heading as=&#39;H3&#39;&gt;</code> is better.</li>\n</ul>\n<p>Having a clean and consistent API is art. Probably it takes iterations to achieve simplicity. <a href=\"https://seek-oss.github.io/braid-design-system/\">Braid</a> to check since they offer this feature as one of their unique selling point:</p>\n<blockquote>\n<p>We’re aggressively focused on the simplicity and composability of its API.</p>\n</blockquote>\n<h4>Example apps</h4>\n<p>Show, don’t tell. An example worth thousands of words.</p>\n<p>After browsing the docs a common practice is to check the source code to get a glimpse about the quality of the work done.</p>\n<p>Yet half of the examined systems have no example apps. Or the code quality rings alarms.</p>\n<h4>Naming conventions</h4>\n<p>For devs an important factor is to feel the structure of the system familiar.</p>\n<p>Finding parts of the system should be intuitive with as less cognitive load as possible. From the big picture—tokens, hooks, components, themes—to the details—button variations.</p>\n<p>The vertical integration of the layers should be clear and well-thought.\nThe <code class=\"language-text\">token -&gt; theme -&gt; hook -&gt; component</code> path when extending the system should be easy to follow.</p>\n<h4>Guidelines</h4>\n<p>Design decisions make or break a product.\nYet documenting these decisions is often missing.</p>\n<p>Guidelines explaining design decisions reduce development time.\nOnce devs understand the structure of the system and the theory behind they can use it as it’s their own.</p>\n<h2>Summing up</h2>\n<p>Let’s go back to Somenage and sum up the findings.</p>\n<ul>\n<li><strong>Purpose</strong>: A tool for building interactive design websites.</li>\n<li><strong>Target audience</strong>: An internal tool first, then later published for wider audience.</li>\n<li><strong>Type</strong>: Not yet decided. More a design system than a component library.</li>\n<li>\n<p><strong>Features</strong>:</p>\n<ul>\n<li>Highly interactive components (React)</li>\n<li>Streaming content (Virtual lists)</li>\n<li>Gestures (A11y)</li>\n<li>Static websites (SSR)</li>\n<li>Optimized for search engines (SEO)</li>\n<li>No NPM publishing. No monorepo (Internal audience)</li>\n</ul>\n</li>\n<li>\n<p><strong>Technology</strong>:</p>\n<ul>\n<li><code class=\"language-text\">react-aria</code> for virtual lists and A11y</li>\n<li><code class=\"language-text\">Next.js</code> for SSR</li>\n<li><code class=\"language-text\">Semantic HTML5</code> elements for SEO</li>\n<li><code class=\"language-text\">Typescript</code></li>\n<li><code class=\"language-text\">CSS-in-JS</code></li>\n<li><code class=\"language-text\">ts-jest</code> and <code class=\"language-text\">React Testing Library</code> for unit tests</li>\n<li>Some kind of integration testing. <code class=\"language-text\">Cypress</code>, or <code class=\"language-text\">Storybook</code></li>\n<li><code class=\"language-text\">JSDoc</code> to generate the documentation instead of writing it by hand</li>\n<li>Easy imports. Something like <a href=\"https://nextjs.org/docs/advanced-features/module-path-aliases\">module path aliases</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Documentation</strong>:</p>\n<ul>\n<li>Integrated, all-in-one documentation</li>\n<li>Searchable</li>\n<li>Props properly displayed</li>\n<li>Props showcased by examples</li>\n<li>Live editor / playground for examples</li>\n</ul>\n</li>\n<li>\n<p><strong>Example apps</strong></p>\n<ul>\n<li>High quality source code</li>\n</ul>\n</li>\n<li>\n<p><strong>Theory</strong></p>\n<ul>\n<li>Single Source of Truth (SST)</li>\n<li>Single Responsibility Principle (SRP)</li>\n<li>The base / variant pattern (BEM)</li>\n<li>Clean API</li>\n<li>Naming conventions</li>\n<li>Guidelines for design decisions</li>\n</ul>\n</li>\n</ul>\n<h2>The takeaway</h2>\n<p>Creating a design system or a component library starts with analysis and planning. The goal of the process is to prepare the implementation.</p>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Input</th>\n\t\t<th>Output</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Purpose<br/>Audience<br/>Best practices</td>\n\t\t<td>Features<br/>Technologies<br/>Deliverables<br/>Theory</td>\n\t</tr>\n</tbody>\n</table>\n<p>The findings for the Somenage exercise sums up in the following tables.</p>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Technology</th>\n\t\t<th>Feature</th>\n\t\t<th>Best practice</th>\n\t\t<th>Notes</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td><code>react</code></td>\n\t\t<td>Highly interactive components</td>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>react-aria<code></td>\n\t\t<td>Streaming content</td>\n\t\t<td></td>\n\t\t<td>Virtual lists</td>\n\t</tr>\n\t<tr>\n\t\t<td></td>\n\t\t<td>Gestures</td>\n\t\t<td></td>\n\t\t<td>A11y</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>next.js</code></td>\n\t\t<td>Static sites</td>\n\t\t<td></td>\n\t\t<td>Server side rendering</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>Semantic HTML5</code></td>\n\t\t<td>Optimized for search engines</td>\n\t\t<td></td>\n\t\t<td>It's the first step. <code>JSON-LD</code> is the next.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>typescript</code></td>\n\t\t<td>Stable API</td>\n\t\t<td>✅</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>emotion</code></td>\n\t\t<td>CSS-in-JS</td>\n\t\t<td>✅</td>\n\t\t<td>Better support for object notation than <code>styled-components</code>.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>ts-jest</code></td>\n\t\t<td>Unit tests</td>\n\t\t<td>✅</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>testing-library/react</code></td>\n\t\t<td>Unit tests</td>\n\t\t<td>✅</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>cypress</code></td>\n\t\t<td>Integration tests</td>\n\t\t<td>✅</td>\n\t\t<td>Storybook goes after tests, docs but none in a perfect way.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>jsdoc</code></td>\n\t\t<td>Live, generated documentation</td>\n\t\t<td>✅</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>Module path aliases</code></td>\n\t\t<td>Easy imports</td>\n\t\t<td>✅</td>\n\t\t<td><code>import '@somenage/*'</code></td>\n\t</tr>\n</tbody>\n</table>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Deliverable</th>\n\t\t<th>Features</th>\n\t\t<th>Best practice</th>\n\t\t<th>Notes</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Documentation</td>\n\t\t<td>Integrated<br/>Searchable<br/>Props<br/>Playground</td>\n\t\t<td>✅</td>\n\t\t<td>One single app with impeccable UX.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Example apps</td>\n\t\t<td>High quality source code</td>\n\t\t<td>✅</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Guidelines</td>\n\t\t<td>For design decisions</td>\n\t\t<td>✅</td>\n\t\t<td>Perhaps integrated into Documentation</td>\n\t</tr>\n</tbody>\n</table>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Theory</th>\n\t\t<th>Features</th>\n\t\t<th>Best practice</th>\n\t\t<th>Notes</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Single Source of Truth (SST)</td>\n\t\t<td>All settings in one single place.</td>\n\t\t<td>✅</td>\n\t\t<td><strong>Specific for design systems</strong></td>\n\t</tr>\n\t<tr>\n\t\t<td>Single Responsibility Principle (SRP)</td>\n\t\t<td>Functional compositions<br/>Modular architecture</td>\n\t\t<td>✅</td>\n\t\t<td>Functional Reactive Programming</td>\n\t</tr>\n\t<tr>\n\t\t<td>The base / variant pattern (BEM)</td>\n\t\t<td>Scalability and simplicity</td>\n\t\t<td>✅</td>\n\t\t<td>An old best practice</td>\n\t</tr>\n\t<tr>\n\t\t<td>Clean API</td>\n\t\t<td>Minimal props with uniform naming</td>\n\t\t<td>✅</td>\n\t\t<td>The hardest to achieve</td>\n\t</tr>\n\t<tr>\n\t\t<td>Folder structure</td>\n\t\t<td>Find anything in no time</td>\n\t\t<td>✅</td>\n\t\t<td>Reduce cognitive load</td>\n\t</tr>\n</tbody>\n</table>\n<p>Et voilà. After a long journey Somenage tends to be a design system rather a component library.</p>\n<p>In theory. Practice always puts constraints on theory.</p>\n<p>In tech stacks while each part works fine on its own they often break when combined.</p>\n<p>Where two parts meet, a grey zone forms. Bugs in the grey zones doesn’t belong to any of the maintainers.</p>\n<p>This is where stack building implies Herculean efforts often resulting in trade-offs forcing change on the original theory.</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://adele.uxpin.com/\">Adele / UXPin - A repository of publicly available design systems and pattern libraries</a></li>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1Yn-fzRIfXcpFilQwjv62MC4yRCTQFaS2qhhtbnfohhg/edit?usp=sharing\">A quick analysis of design systems and component libraries</a></li>\n<li><a href=\"https://www.slideshare.net/MajaWichrowska/building-and-rebuilding-the-airbnb-design-system\">Building (and Re-Building) the Airbnb Design System </a></li>\n<li><a href=\"https://www.youtube.com/watch?v=jnV1u67_yVg&#x26;feature=youtu.be\">Mark Dalgleish: Rethinking Design Practices</a></li>\n<li><a href=\"https://idyll-lang.org/\">idyll - A toolkit for creating data-driven stories and explorable explanations</a></li>\n</ul>","frontmatter":{"title":"On design systems","date":"January 06, 2021"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/on-design-sytems/","previous":{"excerpt":"For highly interactive, static websites without API.","fields":{"slug":"/my-current-stack/"},"frontmatter":{"title":"My current stack"}},"next":null}}}